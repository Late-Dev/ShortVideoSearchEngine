version: "3.4"
services:
  app:
    build: "./frontend"
    ports:
      - "80:80"

  backend:
    build: ./backend
    command: sh run_server.sh
    ports:
      - 8000:8000
    networks:
      - mongo_network
      - search_network
    environment:
      MONGO_HOST: mongo
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWD: ${MONGO_PASSWD}

  mongo:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWD}
    ports:
      - 27017:27017
    networks:
      - mongo_network
    restart: always

  mongo-express:
    image: mongo-express:latest
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWD}
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_USER}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_PASSWD}
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: "27017"
    ports:
      - "0.0.0.0:5051:8081"
    networks:
      - mongo_network
    depends_on:
      - mongo

  search-service:
    build: ./search_service
    environment:
      PORT: 80
    networks:
      - search_network
    
  search-face-service:
    build: ./search_service
    environment:
      PORT: 80
    networks:
      - search_network

  controller:
    build: ./controller
    environment:
      MONGO_HOST: mongo
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWD: ${MONGO_PASSWD}
      TRITON_URL: model-inference:8001
      SEARCH_SERVICE: http://search-service
    networks:
      - mongo_network
      - inference_network
      - search_network
    depends_on:
      - mongo
      - model-inference
      - search-service
    restart: always

  model-inference:
    build: ./model-inference
    ports:
      - "8001:8001"
    volumes:
      - ./models:/models
    networks:
      - inference_network
    restart: always

networks:
  mongo_network:
    driver: bridge
  search_network:
    driver: bridge
  inference_network:
    driver: bridge
